#!/usr/bin/env bash

# Mirroring data is not configured per Engine in the engine.json file used to create the engine
# See examples in rest-server/data/test_resource.json file

# Harness Server config, should work as-id unless you are using SSL
export REST_SERVER_HOST=${REST_SERVER_HOST:-localhost}
export REST_SERVER_PORT=${REST_SERVER_PORT:-9090}
export HARNESS_EXTERNAL_ADDRESS=localhost

# For SSL use the following
# 0.0.0.0 is typical for a server listening for external connections
#export REST_SERVER_HOST=${REST_SERVER_HOST:-0.0.0.0}
# no port changes are required
#export REST_SERVER_PORT=${REST_SERVER_PORT:-9090}
# the HARNESS_EXTERNAL_ADDRESS should be the address your certificate is bound to
#export HARNESS_EXTERNAL_ADDRESS=<external IP address or DNS name>

export MONGO_HOST=${MONGO_HOST:-localhost}
export MONGO_PORT=${MONGO_PORT:-27017}

export HARNESS_LOG_CONFIG="${HARNESS_HOME}/conf/logback.xml"
export HARNESS_LOG_PATH="${HARNESS_HOME}/logs"

# Harness Auth
export HARNESS_AUTH_ENABLED=${HARNESS_AUTH_ENABLED:-false}
# When auth is enabled there must be an admin user-id set so create one before turning on Auth
# export ADMIN_USER_ID=some-user-id
# Can override where this is stored, the default is where the CLI user's ssh keys are stored
# export ADMIN_USER_SECRET_LOCATION=${ADMIN_USER_SECRET_LOCATION:-"$HOME/.ssh/${ADMIN_USER_ID}.secret"}

# Harness TLS/SSL client support. This is used by the server so any client, including the CLI, should match this setup.
export HARNESS_KEYSTORE_PASSWORD=${HARNESS_KEYSTORE_PASSWORD:-23harness5711!}
export HARNESS_KEYSTORE_PATH=${HARNESS_KEYSTORE_PATH:-$HARNESS_HOME/harness.jks}
export HARNESS_SSL_ENABLED=${HARNESS_SSL_ENABLED:-false}
# Java SDK uses the following, usually set this for any client app using the Java SDK with TLS/SSL
# export HARNESS_SERVER_CERT_PATH=${HARNESS_KEYSTORE_PATH:-$HARNESS_HOME/harness.pem}
